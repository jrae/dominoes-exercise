c
output_chain
n
matching
c
matching
c
matching
c
result
n
matching
c
n
result&.length == dominoes.length
result
n
chained_list.empty?
chained_list
n
matching
c
matching
c
number
c
doms
doms.delete(first)
doms.methods
n
c
e
n
doms
second
first
n
c
chained_list
doms
doms = doms - chained_list
doms
 doms -= chained_list
chained_list
doms
n
chained_list
n
dominoes
c
dominoes_array.flatten.group_by{|x| x}.flatten.select{|y| y.is_a?(Array)}.sort_by(&:size).last[0]
dominoes_array.flatten.group_by{|x| x}.flatten.select{|y| y.is_a?(Array)}.sort_by(&:size).last[0
dominoes_array.flatten.group_by{|x| x}.flatten.select{|y| y.is_a?(Array)}.sort_by(&:size).last
dominoes_array.flatten.group_by{|x| x}.flatten.select{|y| y.is_a?(Array)}.sort_by(&:size)
dominoes_array.flatten.group_by{|x| x}.flatten.select{|y| y.is_a?(Array)}.sort
dominoes_array.flatten.group_by{|x| x}.flatten.select{|y| y.is_a?(Array)}.sort(&:count)
dominoes_array.flatten.group_by{|x| x}.flatten.select{|y| y.is_a?(Array)}.sort(&:size)
dominoes_array.flatten.group_by{|x| x}.flatten.select{|y| y.is_a?(Array)}.max
dominoes_array.flatten.group_by{|x| x}.flatten.select{|y| y.is_a?(Array)}
dominoes_array.flatten.group_by{|x| x}.flatten
dominoes_array.flatten.group_by{|x| x}
 number_match.flatten.select{}dominoes_array.flatten.group_by{|x| x}.select{is_array}.sort_by(&:count)
 number_match.flatten.sort_by(&:count)
 number_match.flatten.sort_by(&:size)
 number_match.flatten
sort(&:size)
sort_by(&:size)
number_match.flatten
number_match.flatten.max
number_match.flatten
number_match
t = number_match.collect{|k,v| v.count }
t = number_match.select{|k,v| v.count }
t = _
number_match.select{|k,v| v.count }
number_match.select{|k,v| v.max }
number_match.select(&:max)
number_match.select(:max)
number_match
c
self
dominoes
c
chained_list
c
dominoes -=  matching[0 + offset].new_chain(matching[1 + offset])
matching[1 + offset]
matching[0 + offset]
c
chained_list
c
chained_list
c
doms
doms.pop
doms.popped
popped
doms
c
doms
c
chained_list
c
chained_list 
c
@dominoes
c
@dominoes
chained_list
c
@dominoes
chained_list
c
@dominoes
c
number_match
c
number_match
c
number_match
c
number_match
c
number_match
c
first_two.size == 1
first_two.size == nil
first_two
c
first_two
c
first_two
c
other_dominoe
c
other_dominoe
c
d1
s
output_chain
c
s
output_chain
c
@dominoes
first_two
c
chained_list
c
first_two = @dominoes.select { |dom| dom.has_number?(number) }
first_two
c
dom1
@dominoes
c
@dominoes
dom1
number
c
dominoes_array
n
dominoes_array.length == 1
dominoes_array
c
dominoes_array
c
dominoes_array
single_play(dominoes_array.first)
c
single_play(dominoes_array.first)
c
single_play(dominoes_array.first)
c
match = [[0,1], [2,3], [2,4]].flatten.group_by{|x| x}.select{|k,v| v.size > 1 }.first
match = [[0,1], [2,3], [2,4]].flatten.group_by{|x| x}.select{|k,v| v.size > 1 }.key
match = [[0,1], [2,3], [2,4]].flatten.group_by{|x| x}.select{|k,v| v.size > 1 }
match
match.present?
match.prsent?
match = [[0,1], [2,3], [5,4]].flatten.group_by{|x| x}.select{|k,v| v.size > 1 }
match = [[0,1], [2,3], [2,4]].flatten.group_by{|x| x}.select{|k,v| v.size > 1 }
[[0,1], [2,3], [2,4]].flatten.group_by{|x| x}.select{|k,v| v.size > 1 }
[[0,1], [2,3], [2,4]].flatten.group_by{|x| x}.max
[[0,1], [2,3], [2,4]].flatten.group_by{|x| x}
[[0,1], [2,3], [2,4]].flatten.group_by{|x| x}.sort_by{|k| k}
[[0,1], [2,3], [2,4]].flatten.group_by{|x| x}.sort_by{|k| v}
[[0,1], [2,3], [2,4]].flatten.group_by{|x| x}.sort_by{|k, v| v}
[[0,1], [2,3], [2,4]].flatten.group_by{|x| x}.sort_by{|k v| v}
[[0,1], [2,3], [2,4]].flatten.group_by{|x| x}.sort{|k v| v}
[[0,1], [2,3], [2,4]].flatten.group_by{|x| x}
[[0,1], [2,3], [2,4]].flatten.group_by
[[0,1], [2,3], [2,4]].flatten.group
[[0,1], [2,3], [2,4]].flatten
[[0,1], [2,3], [2,4]].flatten.count ==  [[0,1], [2,3], [2,4]].flatten.unique.count
[[0,1], [2,3], [2,4]].flatten.count ==  [[0,1], [2,3], [2,4]].flatten.uniq.c
[[0,1], [2,3], [2,4]].flatten.count ==  [[0,1], [2,3], [2,4]].flatten.unique.count
[[0,1], [2,3], [2,4]].flatten.count ==  [[0,1], [2,3], [2,4]].count
[[0,1], [2,3], [2,4]].flatten.count
[[0,1], [2,3], [2,4]].flatten
[[0,1], [2,3], [2,4]].flatten.sort
[[0,1], [2,3], [2,4]].flatten
dominoes
dominoe2
dominoe1
c
n
dominoe2
dominoe1
c
dom2 = dominoes.pop
dom1 = dominoes.pop
count
c
dominoes
dominoe1
